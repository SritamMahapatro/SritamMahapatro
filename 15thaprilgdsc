{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyNFK1CRtudSD6l0KkKZgDyN",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SritamMahapatro/SritamMahapatro/blob/main/15thaprilgdsc\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "FNS-15FJFGj1"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset =pd.read_csv(\"train.csv\")"
      ],
      "metadata": {
        "id": "PwnuTEhlFrwd"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "fKrF3eSWGHfj",
        "outputId": "4ff170a0-8db4-4489-9f2f-547fc5cc718d"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   PassengerId  Survived  Pclass  \\\n",
              "0            1         0       3   \n",
              "1            2         1       1   \n",
              "2            3         1       3   \n",
              "3            4         1       1   \n",
              "4            5         0       3   \n",
              "\n",
              "                                                Name     Sex   Age  SibSp  \\\n",
              "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
              "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
              "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
              "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
              "4                           Allen, Mr. William Henry    male  35.0      0   \n",
              "\n",
              "   Parch            Ticket     Fare Cabin Embarked  \n",
              "0      0         A/5 21171   7.2500   NaN        S  \n",
              "1      0          PC 17599  71.2833   C85        C  \n",
              "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
              "3      0            113803  53.1000  C123        S  \n",
              "4      0            373450   8.0500   NaN        S  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4944bf70-c3a4-4fd2-b4d4-248d53dad088\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4944bf70-c3a4-4fd2-b4d4-248d53dad088')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4944bf70-c3a4-4fd2-b4d4-248d53dad088 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4944bf70-c3a4-4fd2-b4d4-248d53dad088');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Lu80QUNDGT78",
        "outputId": "19b4daee-7907-471c-bf5e-aa384ffd3cd4"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(891, 12)"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KHbCqQ4bGuFM",
        "outputId": "fb9832ca-9ff4-4f87-8b20-f4dc9571169d"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 891 entries, 0 to 890\n",
            "Data columns (total 12 columns):\n",
            " #   Column       Non-Null Count  Dtype  \n",
            "---  ------       --------------  -----  \n",
            " 0   PassengerId  891 non-null    int64  \n",
            " 1   Survived     891 non-null    int64  \n",
            " 2   Pclass       891 non-null    int64  \n",
            " 3   Name         891 non-null    object \n",
            " 4   Sex          891 non-null    object \n",
            " 5   Age          714 non-null    float64\n",
            " 6   SibSp        891 non-null    int64  \n",
            " 7   Parch        891 non-null    int64  \n",
            " 8   Ticket       891 non-null    object \n",
            " 9   Fare         891 non-null    float64\n",
            " 10  Cabin        204 non-null    object \n",
            " 11  Embarked     889 non-null    object \n",
            "dtypes: float64(2), int64(5), object(5)\n",
            "memory usage: 83.7+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.info\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-tDYQbi1G3bc",
        "outputId": "bf4d1fa5-b15e-4f4a-cd7f-607c217ac292"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method DataFrame.info of      PassengerId  Survived  Pclass  \\\n",
              "0              1         0       3   \n",
              "1              2         1       1   \n",
              "2              3         1       3   \n",
              "3              4         1       1   \n",
              "4              5         0       3   \n",
              "..           ...       ...     ...   \n",
              "886          887         0       2   \n",
              "887          888         1       1   \n",
              "888          889         0       3   \n",
              "889          890         1       1   \n",
              "890          891         0       3   \n",
              "\n",
              "                                                  Name     Sex   Age  SibSp  \\\n",
              "0                              Braund, Mr. Owen Harris    male  22.0      1   \n",
              "1    Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
              "2                               Heikkinen, Miss. Laina  female  26.0      0   \n",
              "3         Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
              "4                             Allen, Mr. William Henry    male  35.0      0   \n",
              "..                                                 ...     ...   ...    ...   \n",
              "886                              Montvila, Rev. Juozas    male  27.0      0   \n",
              "887                       Graham, Miss. Margaret Edith  female  19.0      0   \n",
              "888           Johnston, Miss. Catherine Helen \"Carrie\"  female   NaN      1   \n",
              "889                              Behr, Mr. Karl Howell    male  26.0      0   \n",
              "890                                Dooley, Mr. Patrick    male  32.0      0   \n",
              "\n",
              "     Parch            Ticket     Fare Cabin Embarked  \n",
              "0        0         A/5 21171   7.2500   NaN        S  \n",
              "1        0          PC 17599  71.2833   C85        C  \n",
              "2        0  STON/O2. 3101282   7.9250   NaN        S  \n",
              "3        0            113803  53.1000  C123        S  \n",
              "4        0            373450   8.0500   NaN        S  \n",
              "..     ...               ...      ...   ...      ...  \n",
              "886      0            211536  13.0000   NaN        S  \n",
              "887      0            112053  30.0000   B42        S  \n",
              "888      2        W./C. 6607  23.4500   NaN        S  \n",
              "889      0            111369  30.0000  C148        C  \n",
              "890      0            370376   7.7500   NaN        Q  \n",
              "\n",
              "[891 rows x 12 columns]>"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.isnull()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "j5WHZkOPG-RM",
        "outputId": "dda462a9-bba5-4d65-b642-17d8dfe4add8"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     PassengerId  Survived  Pclass   Name    Sex    Age  SibSp  Parch  Ticket  \\\n",
              "0          False     False   False  False  False  False  False  False   False   \n",
              "1          False     False   False  False  False  False  False  False   False   \n",
              "2          False     False   False  False  False  False  False  False   False   \n",
              "3          False     False   False  False  False  False  False  False   False   \n",
              "4          False     False   False  False  False  False  False  False   False   \n",
              "..           ...       ...     ...    ...    ...    ...    ...    ...     ...   \n",
              "886        False     False   False  False  False  False  False  False   False   \n",
              "887        False     False   False  False  False  False  False  False   False   \n",
              "888        False     False   False  False  False   True  False  False   False   \n",
              "889        False     False   False  False  False  False  False  False   False   \n",
              "890        False     False   False  False  False  False  False  False   False   \n",
              "\n",
              "      Fare  Cabin  Embarked  \n",
              "0    False   True     False  \n",
              "1    False  False     False  \n",
              "2    False   True     False  \n",
              "3    False  False     False  \n",
              "4    False   True     False  \n",
              "..     ...    ...       ...  \n",
              "886  False   True     False  \n",
              "887  False  False     False  \n",
              "888  False   True     False  \n",
              "889  False  False     False  \n",
              "890  False   True     False  \n",
              "\n",
              "[891 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f6279dfe-dda3-47ed-9e1e-5003ec65e678\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>886</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>887</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>888</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>889</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>890</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>891 rows × 12 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f6279dfe-dda3-47ed-9e1e-5003ec65e678')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f6279dfe-dda3-47ed-9e1e-5003ec65e678 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f6279dfe-dda3-47ed-9e1e-5003ec65e678');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fg50-AOhHmrT",
        "outputId": "04c517da-fc48-4d7c-cadc-0df7cd6f50b9"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PassengerId      0\n",
              "Survived         0\n",
              "Pclass           0\n",
              "Name             0\n",
              "Sex              0\n",
              "Age            177\n",
              "SibSp            0\n",
              "Parch            0\n",
              "Ticket           0\n",
              "Fare             0\n",
              "Cabin          687\n",
              "Embarked         2\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset=dataset.drop(columns='Cabin',axis=1)"
      ],
      "metadata": {
        "id": "PC2CCxfkHwX7"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mbcd9RN6Isul",
        "outputId": "fcd43479-9c63-4b85-844e-5e76c27417d0"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PassengerId      0\n",
              "Survived         0\n",
              "Pclass           0\n",
              "Name             0\n",
              "Sex              0\n",
              "Age            177\n",
              "SibSp            0\n",
              "Parch            0\n",
              "Ticket           0\n",
              "Fare             0\n",
              "Embarked         2\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#replacing the missing age column with its mean value\n",
        "dataset['Age'].fillna(dataset['Age'].mean(),inplace=True)"
      ],
      "metadata": {
        "id": "jyB2hjwGIu4E"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cqtJExGgJ8AL",
        "outputId": "25d5c948-8fa2-4374-a93b-56f9b40e88bf"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PassengerId    0\n",
              "Survived       0\n",
              "Pclass         0\n",
              "Name           0\n",
              "Sex            0\n",
              "Age            0\n",
              "SibSp          0\n",
              "Parch          0\n",
              "Ticket         0\n",
              "Fare           0\n",
              "Embarked       2\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset['Embarked'].mode()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "o-VlytTCKDHj",
        "outputId": "4ca36919-7911-4e72-833f-eb8f9133eb81"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    S\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "dataset['Embarked'].fillna(dataset['Embarked'].mode()[0],inplace=True)"
      ],
      "metadata": {
        "id": "ovYvYLEfKxe8"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kfIsCV4mK8ID",
        "outputId": "cd7d5120-eb0a-4db5-f3a7-fdea32f4b8d5"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PassengerId    0\n",
              "Survived       0\n",
              "Pclass         0\n",
              "Name           0\n",
              "Sex            0\n",
              "Age            0\n",
              "SibSp          0\n",
              "Parch          0\n",
              "Ticket         0\n",
              "Fare           0\n",
              "Embarked       0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "Rppf30m5LUeN",
        "outputId": "dfad5199-97f3-4cd4-d8ca-ce57011f53a3"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       PassengerId    Survived      Pclass         Age       SibSp  \\\n",
              "count   891.000000  891.000000  891.000000  891.000000  891.000000   \n",
              "mean    446.000000    0.383838    2.308642   29.699118    0.523008   \n",
              "std     257.353842    0.486592    0.836071   13.002015    1.102743   \n",
              "min       1.000000    0.000000    1.000000    0.420000    0.000000   \n",
              "25%     223.500000    0.000000    2.000000   22.000000    0.000000   \n",
              "50%     446.000000    0.000000    3.000000   29.699118    0.000000   \n",
              "75%     668.500000    1.000000    3.000000   35.000000    1.000000   \n",
              "max     891.000000    1.000000    3.000000   80.000000    8.000000   \n",
              "\n",
              "            Parch        Fare  \n",
              "count  891.000000  891.000000  \n",
              "mean     0.381594   32.204208  \n",
              "std      0.806057   49.693429  \n",
              "min      0.000000    0.000000  \n",
              "25%      0.000000    7.910400  \n",
              "50%      0.000000   14.454200  \n",
              "75%      0.000000   31.000000  \n",
              "max      6.000000  512.329200  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-53cfb330-f270-49df-a6d4-50907885470f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>446.000000</td>\n",
              "      <td>0.383838</td>\n",
              "      <td>2.308642</td>\n",
              "      <td>29.699118</td>\n",
              "      <td>0.523008</td>\n",
              "      <td>0.381594</td>\n",
              "      <td>32.204208</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>257.353842</td>\n",
              "      <td>0.486592</td>\n",
              "      <td>0.836071</td>\n",
              "      <td>13.002015</td>\n",
              "      <td>1.102743</td>\n",
              "      <td>0.806057</td>\n",
              "      <td>49.693429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.420000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>223.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>22.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>7.910400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>446.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>29.699118</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>14.454200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>668.500000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>35.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>31.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>891.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>80.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>512.329200</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-53cfb330-f270-49df-a6d4-50907885470f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-53cfb330-f270-49df-a6d4-50907885470f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-53cfb330-f270-49df-a6d4-50907885470f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset['Survived'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d3duivWXLec4",
        "outputId": "2a241980-93f9-4776-dea9-bc29655a64eb"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    549\n",
              "1    342\n",
              "Name: Survived, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#sns vizualization\n",
        "sns.set()"
      ],
      "metadata": {
        "id": "Kbs_BAX_LrRz"
      },
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot('Survived',data=dataset)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 357
        },
        "id": "_gP-toP8L3zs",
        "outputId": "7a6c3b36-96ac-48f8-a1f8-74c0bfd3d83f"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f2158e2b050>"
            ]
          },
          "metadata": {},
          "execution_count": 41
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset['Sex'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dS0pSrkHMFxj",
        "outputId": "441a947c-9df3-4fc4-e68a-eb0fb8a6043b"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "male      577\n",
              "female    314\n",
              "Name: Sex, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot('Survived',data=dataset)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 357
        },
        "id": "3FCBxgaRMfdb",
        "outputId": "c3380c80-31eb-448d-9cd0-cafbc95627d5"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f2158c1a610>"
            ]
          },
          "metadata": {},
          "execution_count": 44
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}